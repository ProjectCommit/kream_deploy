<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="userSQL">
<resultMap id="userResult" type="kream.bean.UserDTO">
    <result column="email" property="email"/>
    <result column="pwd" property="pwd"/>
    <result column="phone" property="phone"/>
    <result column="shoeSize" property="shoeSize"/>
    <result column="userName" property="userName"/>
    <result column="address" property="address"/>
    <result column="address2" property="address2"/>
    <result column="zipcode" property="zipcode"/>
    <result column="createdDate" property="createdDate"/>
    <result column="releaseDate" property="releaseDate"/>
    <result column="profileName" property="profileName"/>
    <result column="introduce" property="introduce"/>
    <result column="nickname" property="nickname"/>
    <result column="admin" property="admin"/>
</resultMap>
<!--********************************* 지안 시작 ********************************* -->
	<!-- 목록 불러오기 -->
		<select id="load" resultType="user">
			select * from user;
		</select>
		
		<!-- 회원 정보 수정 -->
		<update id="editUser" parameterType="user">
	    UPDATE user
	        SET 
	            pwd = #{pwd},
	            phone = #{phone},
	            shoeSize = #{shoeSize},
	            userName = #{userName},
	            address = #{address},
	            address2 = #{address2},
	            zipcode = #{zipcode},
	            releaseDate = NOW(),
	            profileName = #{profileName},
	            introduce = #{introduce},
	            nickname = #{nickname},
	            admin = #{admin}
	        WHERE email = #{email};
		</update>
		
		<!-- 회원 삭제 -->
		<delete id="deleteUser" parameterType="product">
			delete from user where email = #{email};
		</delete>
	
		 <!-- 선택된 상품들을 삭제하는 쿼리 -->
		<delete id="selectDelete" parameterType="userEmails">
	        delete from user where email in
	        <foreach item="email" index="index" collection="userEmailList" open="(" separator="," close=")">
	            #{email}
	        </foreach>
	    </delete>
<!--********************************* 지안 끝 ********************************* -->


<!--********************************* 병권 시작 ********************************* -->

	<select id="getUser" parameterType="map" resultType="user">
    	SELECT email, pwd FROM user WHERE email = #{email} AND pwd = #{pwd}
	</select>
	
	<select id="getUserInfo" parameterType="String" resultType="user">
        SELECT * FROM user WHERE email = #{email}
    </select>
    
    <select id="isExistId" parameterType="String" resultType="user">
 		select * from user where email=#{email}
 	</select>
 	
 	<update id="updateEmail" parameterType="java.util.Map">
    	UPDATE user SET email = #{newEmail} WHERE email = #{oldEmail}
	</update>
	
    <select id="verifyPassword" parameterType="java.util.Map" resultType="int">
        SELECT COUNT(*) FROM user WHERE email = #{email} AND pwd = #{oldPassword}
    </select>
	
	<update id="updatePassword" parameterType="java.util.Map" statementType="PREPARED">
	    <![CDATA[
	    UPDATE user SET pwd = #{newPassword} WHERE email = #{email}
	    ]]>
	</update>
	
	<!-- 사용자의 관심 상품을 추가하는 쿼리 -->
    <!-- <insert id="addWishList" parameterType="map">
        INSERT INTO wishLists (productId, email)
        VALUES (#{productId}, #{email});
    </insert> -->

    <!-- 사용자의 관심 상품 목록을 가져오는 쿼리 -->
    <select id="getWishList" parameterType="string" resultType="map">
        SELECT * FROM product
        WHERE productId IN (SELECT productId FROM wishLists WHERE email = #{email});
    </select>

	<!-- 관심상품 목록 삭제 -->
	<delete id="deleteWishList" parameterType="wishLists">
		delete from wishLists where productId = #{productId} and email = #{email};
	</delete>
	
	<!-- 주소목록 조회 -->
	<select id="getAddressList" parameterType="string" resultType="address">
	    SELECT * FROM address
	    WHERE email IN (SELECT email FROM user WHERE email = #{email})
	</select>
	
    <!-- 주소 정보를 address 테이블에 삽입 -->
    <insert id="insertAddress" parameterType="address">
        INSERT INTO address (email, addressName, phone, address, address2, zipcode, isDefault)
        VALUES (#{email}, #{addressName}, #{phone}, #{address}, #{address2}, #{zipcode}, #{isDefault})
    </insert>

    <!-- 주소지 수정 -->
    <!-- 
    <update id="updateAddress" parameterType="address">
	    UPDATE address
	    	SET addressName = #{addressName}, address = #{address}, address2 = #{address2}, zipcode = #{zipcode}
	    WHERE email = #{email} and addressId = #{addressId}
	</update> -->
<!--********************************* 병권 끝 ********************************* -->
</mapper>